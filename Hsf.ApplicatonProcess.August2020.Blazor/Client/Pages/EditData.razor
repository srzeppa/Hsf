@page "/editdata"
@using Hsf.ApplicatonProcess.August2020.Blazor.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities

<h1>Edit Applicant</h1>

<div style="color:@color">@errorMessage</div>

<EditForm Model="@applicant" OnSubmit=@HandleSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        Name: <InputText id="name" @bind-Value="applicant.Name" />
    </div>
    <div class="form-group">
        Family name:<InputText id="name" @bind-Value="applicant.FamilyName" />
    </div>
    <div class="form-group">
        Address: <InputText id="name" @bind-Value="applicant.Address" />
    </div>
    <div class="form-group">
        Country of origin: <InputText id="name" @bind-Value="applicant.CountryOfOrigin" />
    </div>
    <div class="form-group">
        Email address<InputText id="name" @bind-Value="applicant.EmailAddress" />
    </div>
    <div class="form-group">
        Age: <InputNumber id="name" @bind-Value="applicant.Age" />
    </div>
    <div class="form-group">
        Hired: <InputCheckbox id="hired" @bind-Value="applicant.Hired" />
    </div>

    <button class="btn btn-warning" @onclick="Reset" @onclick:preventDefault>Cancel</button>
    <input type="submit" class="btn btn-primary" value="Save" />

</EditForm>

@code {
    private Applicant applicant = new Applicant();
    private string errorMessage = "";
    private string color = "";
    private string applicantId;

    private async Task HandleSubmit(EditContext editContext)
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        applicant.Id = int.Parse(QueryHelpers.ParseQuery(uri.Query).GetValueOrDefault("id"));
        var result = await Http.PutAsJsonAsync<Applicant>("Applicant/Edit", applicant);
        if (result.StatusCode != System.Net.HttpStatusCode.OK)
        {
            color = "red";
            errorMessage = await result.Content.ReadAsStringAsync();
        }
        else
        {
            color = "green";
            errorMessage = "User edited successfully! :D";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var applicantId);
        var result = await Http.GetAsync($"Applicant/GetById?id={applicantId}");
        applicant = await result.Content.ReadFromJsonAsync<Applicant>();
    }

    private void Reset()
    {
        applicant.Address = "";
        applicant.Age = 0;
        applicant.CountryOfOrigin = "";
        applicant.EmailAddress = "";
        applicant.FamilyName = "";
        applicant.Name = "";
    }
}
